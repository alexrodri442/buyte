service: buyte

frameworkVersion: ">=2.0.0 <=3.0.0"

provider:
  name: aws
  runtime: go1.x
  region: ${opt:region, 'ap-southeast-2'}
  memorySize: 128
  timeout: 30
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  apiGateway:
    shouldStartNameWithService: true
    usagePlan:
      quota:
        limit: 10000000
        offset: 1
        period: MONTH
      throttle:
        burstLimit: 200
        rateLimit: 100

plugins:
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function
  - serverless-go-build
  - serverless-scriptable-plugin
  - serverless-plugin-scripts
  - serverless-dotenv-plugin

package:
  individually: true

functions:
  api:
    handler: serverless/api/main.go
    environment:
      COGNITO_USERPOOLID: ${env:COGNITO_USERPOOLID}
      COGNITO_CLIENTID: ${env:COGNITO_CLIENTID}
      STORAGE_ENDPOINT: ${env:STORAGE_ENDPOINT}
      APPLE_MERCHANT_DOMAIN: ${env:APPLE_MERCHANT_DOMAIN}
      SERVER_SENTRY: ${env:SERVER_SENTRY}
      SERVER_PRODUCTION: ${env:SERVER_PRODUCTION, self:custom.serverProduction.${self:provider.stage}}
      SERVER_LOG_CORS: ${env:SERVER_LOG_CORS}
      FUNC_ADYEN_CSE: ${env:FUNC_ADYEN_CSE}
      LOGGER_LEVEL: ${env:LOGGER_LEVEL,"info"}
      LOGGER_DEV_MODE: ${env:LOGGER_DEV_MODE}
      LOGGER_DISABLE_CALLER: ${env:LOGGER_DISABLE_CALLER}
      STRIPE_LIVE_SECRET: ${env:STRIPE_LIVE_SECRET}
      STRIPE_LIVE_PUBLIC: ${env:STRIPE_LIVE_PUBLIC}
      STRIPE_TEST_SECRET: ${env:STRIPE_TEST_SECRET}
      STRIPE_TEST_PUBLIC: ${env:STRIPE_TEST_PUBLIC}
    events:
      - http:
          path: '/'
          method: ANY
          cors: true
      - http:
          path: "/{proxy+}"
          method: ANY
          cors: true
    package:
      include:
        - ./certs # Bin may run from within bin folder and therefore this should work.
  auth:
    handler: serverless/auth/main.go
    environment:
      COGNITO_USERPOOLID: ${env:COGNITO_USERPOOLID}
      COGNITO_CLIENTID: ${env:COGNITO_CLIENTID}
    iamRoleStatementsName: ${self:service}-auth-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          "apigateway:*"
        Resource: "*"
      - Effect: "Allow"
        Action:
          cognito-idp:*
        Resource: "*"
  define_auth_challenge:
    handler: serverless/cognito_triggers/define_auth_challenge/main.go
  create_auth_challenge:
    handler: serverless/cognito_triggers/create_auth_challenge/main.go
    iamRoleStatementsName: ${self:service}-cognito-create-auth-challenge-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          "apigateway:*"
        Resource: "*"
  verify_auth_challenge:
    handler: serverless/cognito_triggers/verify_auth_challenge/main.go
  post_confirmation:
    handler: serverless/cognito_triggers/post_confirmation/main.go
    environment:
      API_GATEWAY_NAME: ${self:custom.apiGatewayName}
      API_GATEWAY_ID:
        Ref: ApiGatewayRestApi
      API_GATEWAY_STAGE: ${self:provider.stage}
      API_GATEWAY_USAGE_PLAN_ID:
        Ref: ApiGatewayUsagePlan
      COGNITO_USERPOOLID: ${env:COGNITO_USERPOOLID}
    iamRoleStatementsName: ${self:service}-cognito-post-confirmation-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          "apigateway:*"
        Resource: "*"
      - Effect: "Allow"
        Action:
          cognito-idp:*
        Resource: "*"

  # Payment Gateway Utilities -- Called from Primary API
  adyen_cse:
    description: Use Headless Chrome Serverless for Adyen CSE
    memorySize: 1024
    timeout: 30
    runtime: nodejs12.x
    handler: serverless/paymentgateway/adyen/handler.cse
    package:
      individually: true
      exclude:
        - ./**
      include:
        - ./serverless/paymentgateway/adyen/**
        - ./node_modules/adyen-cse-web/**
        - ./node_modules/@serverless-chrome/lambda/**
        - ./node_modules/chrome-remote-interface/**
        - ./node_modules/commander/**
        - ./node_modules/ws/**
        - ./node_modules/async-limiter/**
    environment:
      PAGE_LOAD_TIMEOUT: 20000

resources:
  # API Gateway
  # - ${file(./serverless/resources/apigateway.yml)}
  - ${file(./serverless/resources/cognito.yml)}


custom:
  version: ${file(./serverless/scripts/version.js)}
  apiGatewayName: ${self:service}-${self:provider.stage}
  scriptHooks:
    deploy:finalize: serverless/scripts/update-cognito-triggers.js
    remove:remove: serverless/scripts/remove-iam-roles.js
  scripts:
    commands:
      rm-roles: ./serverless/scripts/remove-iam-roles.js --stage ${self:provider.stage} --service ${self:service} --region ${self:provider.region}
  serverProduction:
    dev: false
    prod: true
